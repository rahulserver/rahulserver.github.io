{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","href","this","props","totalCounters","Component","Counter","_this","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","Counters","onReset","counters","map","components_counter","key","App","state","handleIncrement","Object","toConsumableArray","index","indexOf","objectSpread","setState","handleReset","handleDelete","counterId","filter","c","Fragment","navbar","length","components_counters","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAiBeA,mLAbP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,KAAjC,SAEIJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,oCACXE,KAAKC,MAAMC,wBAPfC,aCwBNC,0LArBF,IAAAC,EAAAL,KACL,OACAL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAWE,KAAKM,mBAAoBN,KAAKO,eAC/CZ,EAAAC,EAAAC,cAAA,UAAQW,QAAS,kBAAMH,EAAKJ,MAAMQ,YAAYJ,EAAKJ,MAAMS,UAAUZ,UAAU,4BAA7E,aACAH,EAAAC,EAAAC,cAAA,UAAQW,QAAS,kBAAMH,EAAKJ,MAAMU,SAASN,EAAKJ,MAAMS,QAAQE,KAAKd,UAAU,6BAA7E,qDAMJ,IAAIe,EAAU,mBAEd,OADAA,GAAsC,IAA3Bb,KAAKC,MAAMS,QAAQI,MAAU,UAAU,gDAKlD,OAAmC,IAA3Bd,KAAKC,MAAMS,QAAQI,MAAW,OAAOd,KAAKC,MAAMS,QAAQI,aApBlDX,cCcPY,mLAZF,IAAAV,EAAAL,KACL,OACIL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQW,QAASR,KAAKC,MAAMe,QAASlB,UAAU,8BAA/C,SACCE,KAAKC,MAAMgB,SAASC,IAAI,SAAAR,GAAO,OAC5Bf,EAAAC,EAAAC,cAACsB,EAAD,CAASC,IAAKV,EAAQE,GAAID,SAAUN,EAAKJ,MAAMU,SAAUF,YAAaJ,EAAKJ,MAAMQ,YAAaC,QAASA,cANpGP,aCgDRkB,6MA5CbC,MAAQ,CACJL,SAAU,CACN,CAACL,GAAI,EAAGE,MAAO,GACf,CAACF,GAAI,EAAGE,MAAO,GACf,CAACF,GAAI,EAAGE,MAAO,GACf,CAACF,GAAI,EAAGE,MAAO,OAIvBS,gBAAkB,SAAAb,GACd,IAAMO,EAAQO,OAAAC,EAAA,EAAAD,CAAOnB,EAAKiB,MAAML,UAC1BS,EAAWT,EAASU,QAAQjB,GAClCO,EAASS,GAATF,OAAAI,EAAA,EAAAJ,CAAA,GAAsBd,GACtBO,EAASS,GAAOZ,QAChBT,EAAKwB,SAAS,CAACZ,gBAGnBa,YAAc,WACV,IAAMb,EAAWZ,EAAKiB,MAAML,SAASC,IAAI,SAAAR,GAErC,OADAA,EAAQI,MAAQ,EACTJ,IAEXL,EAAKwB,SAAS,CAACZ,gBAGnBc,aAAe,SAAAC,GACX,IAAMf,EAAWZ,EAAKiB,MAAML,SAASgB,OAAO,SAAAC,GAAC,OAAIA,EAAEtB,KAAOoB,IAC1D3B,EAAKwB,SAAS,CAACZ,sFAIjB,OACItB,EAAAC,EAAAC,cAACF,EAAAC,EAAMuC,SAAP,KACIxC,EAAAC,EAAAC,cAACuC,EAAD,CAAQlC,cAAeF,KAAKsB,MAAML,SAASgB,OACvC,SAAAvB,GAAO,OAAGA,EAAQI,MAAQ,IAC5BuB,SACF1C,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aACZH,EAAAC,EAAAC,cAACyC,EAAD,CAAUrB,SAAUjB,KAAKsB,MAAML,SAAUD,QAAShB,KAAK8B,YAAarB,YAAaT,KAAKuB,gBAAiBZ,SAAUX,KAAK+B,wBAvCpH5B,aCOEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dd23b9e5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-light bg-light\">\r\n                <a className=\"navbar-brand\" href=\"#\">\r\n                    NavBar\r\n                    <span className=\"badge badge-pill badge-secondary\">\r\n                        {this.props.totalCounters}\r\n                    </span>\r\n                </a>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\n\r\nclass Counter extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n            <button onClick={() => this.props.onIncrement(this.props.counter)} className=\"btn btn-secondary btn-sm\">Increment</button>\r\n            <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\">Delete</button>\r\n        </div>\r\n        );\r\n    }\r\n\r\n    getBadgeClasses() {\r\n        let classes = \"badge m-2 badge-\";\r\n        classes += this.props.counter.value===0?\"warning\":\"primary\";\r\n        return classes;\r\n    }\r\n\r\n    formatCount() {\r\n        return (this.props.counter.value===0)?'Zero':this.props.counter.value;\r\n    }\r\n}\r\n\r\nexport default Counter;","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.props.onReset} className=\"btn btn-primary btn-sm m-2\">Reset</button>\r\n                {this.props.counters.map(counter =>\r\n                    <Counter key={counter.id} onDelete={this.props.onDelete} onIncrement={this.props.onIncrement} counter={counter}/>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counters;","import React, { Component } from 'react';\nimport NavBar from './components/navbar'\nimport './App.css';\nimport Counters from './components/counters';\n\nclass App extends Component {\n\n  state = {\n      counters: [\n          {id: 1, value: 0},\n          {id: 2, value: 7},\n          {id: 3, value: 0},\n          {id: 4, value: 0}\n      ]\n  };\n\n  handleIncrement = counter => {\n      const counters = [...this.state.counters];\n      const index    = counters.indexOf(counter);\n      counters[index] = {...counter};\n      counters[index].value++;\n      this.setState({counters});\n  };\n\n  handleReset = () => {\n      const counters = this.state.counters.map(counter => {\n          counter.value = 0;\n          return counter;\n      });\n      this.setState({counters});\n  };\n\n  handleDelete = counterId => {\n      const counters = this.state.counters.filter(c => c.id !== counterId);\n      this.setState({counters});\n  };\n\n  render() {\n    return (\n        <React.Fragment>\n            <NavBar totalCounters={this.state.counters.filter(\n                counter=> counter.value > 0\n            ).length}/>\n            <main className=\"container\">\n                <Counters counters={this.state.counters} onReset={this.handleReset} onIncrement={this.handleIncrement} onDelete={this.handleDelete} />\n            </main>\n        </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}